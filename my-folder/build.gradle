buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)' // 更精确的版本范围
    id 'org.spongepowered.mixin' version '0.7.41' // 使用更稳定的Mixin版本
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {
    mappings channel: "official", version: "1.20.1"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // 添加新属性以支持1.20.1
            property 'forge.enabledGameTestNamespaces', 'vehicle'
            mods {
                vehicle {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'vehicle'
            mods {
                vehicle {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'vehicle', '--all', '--output', file('src/generated/resources/')
            // 添加新参数
            args '--existing', file('src/main/resources/')
            mods {
                vehicle {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "vehicle.refmap.json"
    config "vehicle.mixins.json"
    debug.verbose = true
    debug.export = true
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.blamejared.com"
    }
    maven { // 添加 Mixin 官方仓库
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.0'
    
    // 使用新的属性名称
    implementation fg.deobf("curse.maven:posture-${project.posture_file_1_20}:${project.posture_project_1_20}")
    implementation fg.deobf("curse.maven:framework-${project.framework_file_1_20}:${project.framework_project_1_20}")
    implementation fg.deobf("curse.maven:controllable-${project.controllable_file_1_20}:${project.controllable_project_1_20}")
    implementation fg.deobf("curse.maven:configured-${project.configured_file_1_20}:${project.configured_project_1_20}")
    implementation fg.deobf("curse.maven:catalogue-${project.catalogue_file_1_20}:${project.catalogue_project_1_20}")

    // Mixin 配置优化
    implementation(annotationProcessor("org.spongepowered:mixin:0.8.6:processor"))
    implementation('org.spongepowered:mixin:0.8.6') {
        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
        exclude module: "log4j-api"
    }
    
    // 添加 Forge SPI 依赖
    annotationProcessor "net.minecraftforge:forgespi:7.0.0"
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Vehicle Mod",
            "Specification-Vendor": "MrCrayfish",
            "Specification-Version": "1",
            "Implementation-Title": "Vehicle Mod",
            "Implementation-Version": project.version,
            "Implementation-Vendor" : "MrCrayfish",
            "MixinConfigs" : "vehicle.mixins.json",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            // 添加新属性
            "Automatic-Module-Name": "com.mrcrayfish.vehicle"
        ])
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/java", "src/main/resources", "src/generated/resources"]
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    // 添加编译器参数
    options.compilerArgs.add('-Xmaxerrs')
    options.compilerArgs.add('1000')
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    // 添加资源过滤
    exclude '.cache'
    exclude 'Thumbs.db'
}

// 添加新任务
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}